{"remainingRequest":"C:\\Users\\balugoma_Sd2023\\Desktop\\bhmanagementFrontEnd\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\balugoma_Sd2023\\Desktop\\bhmanagementFrontEnd\\node_modules\\vuetify\\lib\\components\\VSparkline\\helpers\\math.js","dependencies":[{"path":"C:\\Users\\balugoma_Sd2023\\Desktop\\bhmanagementFrontEnd\\node_modules\\vuetify\\lib\\components\\VSparkline\\helpers\\math.js","mtime":1574752710475},{"path":"C:\\Users\\balugoma_Sd2023\\Desktop\\bhmanagementFrontEnd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574752634775},{"path":"C:\\Users\\balugoma_Sd2023\\Desktop\\bhmanagementFrontEnd\\node_modules\\babel-loader\\lib\\index.js","mtime":1574752632884}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50IjsKCmZ1bmN0aW9uIGludCh2YWx1ZSkgewogIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApOwp9Ci8qKg0KICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29sbGluZWFyaXR5DQogKiB4PSh4MSt4MikvMg0KICogeT0oeTEreTIpLzINCiAqLwoKCmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbGxpbmVhcihwMCwgcDEsIHAyKSB7CiAgcmV0dXJuIGludChwMC54ICsgcDIueCkgPT09IGludCgyICogcDEueCkgJiYgaW50KHAwLnkgKyBwMi55KSA9PT0gaW50KDIgKiBwMS55KTsKfQpleHBvcnQgZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyKSB7CiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwMi54IC0gcDEueCwgMikgKyBNYXRoLnBvdyhwMi55IC0gcDEueSwgMikpOwp9CmV4cG9ydCBmdW5jdGlvbiBtb3ZlVG8odG8sIGZyb20sIHJhZGl1cykgewogIHZhciB2ZWN0b3IgPSB7CiAgICB4OiB0by54IC0gZnJvbS54LAogICAgeTogdG8ueSAtIGZyb20ueQogIH07CiAgdmFyIGxlbmd0aCA9IE1hdGguc3FydCh2ZWN0b3IueCAqIHZlY3Rvci54ICsgdmVjdG9yLnkgKiB2ZWN0b3IueSk7CiAgdmFyIHVuaXRWZWN0b3IgPSB7CiAgICB4OiB2ZWN0b3IueCAvIGxlbmd0aCwKICAgIHk6IHZlY3Rvci55IC8gbGVuZ3RoCiAgfTsKICByZXR1cm4gewogICAgeDogZnJvbS54ICsgdW5pdFZlY3Rvci54ICogcmFkaXVzLAogICAgeTogZnJvbS55ICsgdW5pdFZlY3Rvci55ICogcmFkaXVzCiAgfTsKfQ=="},{"version":3,"sources":["C:/Users/balugoma_Sd2023/Desktop/bhmanagementFrontEnd/node_modules/vuetify/lib/components/VSparkline/helpers/math.js"],"names":["int","value","parseInt","checkCollinear","p0","p1","p2","x","y","getDistance","Math","sqrt","pow","moveTo","to","from","radius","vector","length","unitVector"],"mappings":";;AAAA,SAASA,GAAT,CAAaC,KAAb,EAAoB;AAClB,SAAOC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAAf;AACD;AACD;;;;;;;AAOA,OAAO,SAASE,cAAT,CAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoC;AACzC,SAAON,GAAG,CAACI,EAAE,CAACG,CAAH,GAAOD,EAAE,CAACC,CAAX,CAAH,KAAqBP,GAAG,CAAC,IAAIK,EAAE,CAACE,CAAR,CAAxB,IAAsCP,GAAG,CAACI,EAAE,CAACI,CAAH,GAAOF,EAAE,CAACE,CAAX,CAAH,KAAqBR,GAAG,CAAC,IAAIK,EAAE,CAACG,CAAR,CAArE;AACD;AACD,OAAO,SAASC,WAAT,CAAqBJ,EAArB,EAAyBC,EAAzB,EAA6B;AAClC,SAAOI,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASN,EAAE,CAACC,CAAH,GAAOF,EAAE,CAACE,CAAnB,EAAsB,CAAtB,IAA2BG,IAAI,CAACE,GAAL,CAASN,EAAE,CAACE,CAAH,GAAOH,EAAE,CAACG,CAAnB,EAAsB,CAAtB,CAArC,CAAP;AACD;AACD,OAAO,SAASK,MAAT,CAAgBC,EAAhB,EAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AACvC,MAAMC,MAAM,GAAG;AACbV,IAAAA,CAAC,EAAEO,EAAE,CAACP,CAAH,GAAOQ,IAAI,CAACR,CADF;AAEbC,IAAAA,CAAC,EAAEM,EAAE,CAACN,CAAH,GAAOO,IAAI,CAACP;AAFF,GAAf;AAIA,MAAMU,MAAM,GAAGR,IAAI,CAACC,IAAL,CAAUM,MAAM,CAACV,CAAP,GAAWU,MAAM,CAACV,CAAlB,GAAsBU,MAAM,CAACT,CAAP,GAAWS,MAAM,CAACT,CAAlD,CAAf;AACA,MAAMW,UAAU,GAAG;AACjBZ,IAAAA,CAAC,EAAEU,MAAM,CAACV,CAAP,GAAWW,MADG;AAEjBV,IAAAA,CAAC,EAAES,MAAM,CAACT,CAAP,GAAWU;AAFG,GAAnB;AAIA,SAAO;AACLX,IAAAA,CAAC,EAAEQ,IAAI,CAACR,CAAL,GAASY,UAAU,CAACZ,CAAX,GAAeS,MADtB;AAELR,IAAAA,CAAC,EAAEO,IAAI,CAACP,CAAL,GAASW,UAAU,CAACX,CAAX,GAAeQ;AAFtB,GAAP;AAID","sourcesContent":["function int(value) {\r\n  return parseInt(value, 10);\r\n}\r\n/**\r\n * https://en.wikipedia.org/wiki/Collinearity\r\n * x=(x1+x2)/2\r\n * y=(y1+y2)/2\r\n */\r\n\r\n\r\nexport function checkCollinear(p0, p1, p2) {\r\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y);\r\n}\r\nexport function getDistance(p1, p2) {\r\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\r\n}\r\nexport function moveTo(to, from, radius) {\r\n  const vector = {\r\n    x: to.x - from.x,\r\n    y: to.y - from.y\r\n  };\r\n  const length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\r\n  const unitVector = {\r\n    x: vector.x / length,\r\n    y: vector.y / length\r\n  };\r\n  return {\r\n    x: from.x + unitVector.x * radius,\r\n    y: from.y + unitVector.y * radius\r\n  };\r\n}\r\n//# sourceMappingURL=math.js.map"]}]}